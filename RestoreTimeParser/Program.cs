// This tool is for helping to identify which projects are taking the longest to restore in a large solution.
// It parses the restore.log file that is generated by MSBuild when running a restore, and outputs a CSV file
// with the project path and the restore time in milliseconds, seconds, and minutes.
// The CSV file can then be opened in Excel and sorted by the restore time columns to identify the slowest projects.
// Usage: RestoreTimeParser.exe <input file path> <output file path>
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;

[assembly: InternalsVisibleTo("RestoreTimeParser.UnitTests")]
internal static class Program
{
    private static void Main(string[] args)
    {
        if (args.Length == 0)
        {
            Console.WriteLine("Please provide the file path as a command-line argument.");
            return;
        }

        // Check that input paths are nominally valid
        var inputPath = args[0];
        var outputPath = args[1];
        if (!Path.Exists(inputPath))
        {
            Console.WriteLine($"File does not exist: {inputPath}");
            return;
        }

        if (outputPath == null)
        {
            Console.WriteLine("Please provide the output file path as a second command-line argument.");
            return;
        }

        var lines = File.ReadAllLines(inputPath);

        var output = ParseRestoreFile(lines);

        using var writer = new StreamWriter(outputPath);
        writer.WriteLine("File,RestoreTimeMS,RestoreTimeSeconds,RestoreTimeMinutes");
        foreach (var line in output)
        {
            writer.WriteLine(line);
        }

        Console.WriteLine($"Output of {output.Count} lines written to {outputPath}");

    }
    internal static List<string> ParseRestoreFile(string[] lines)
    {
        var output = new List<string>();
        foreach (var line in lines)
        {
            // Look for lines that restored within milliseconds. The line will look like this:
            // A regex to match the line "         Restored D:\dbs\el\ctpl\sources\dev\Torus\src\WorkflowSchedulePackage\WorkflowSchedulePackage.csproj (in 86 ms)."
            var matchMS = Regex.Match(line, @"^\s+Restored (.*) \(in (\d+) ms\)\.$");
            if (matchMS.Success)
            {
                string projectPath = matchMS.Groups[1].Value;
                double restoreTimeMS = double.Parse(matchMS.Groups[2].Value);
                double restoreTimeSeconds = Math.Round(restoreTimeMS / 1000, 2);
                double restoreTimeMinutes = Math.Round(restoreTimeSeconds / 60, 2);
                output.Add($"{projectPath},{restoreTimeMS},{restoreTimeSeconds},{restoreTimeMinutes}");
                continue;
            }

            // Look for lines that restored within seconds. The line will look like this:
            // A regex to match the line  "         Restored d:\dbs\el\utff\src\sources\dev\mexagents\src\addressbookpolicyroutingagent\Microsoft.Exchange.Transport.Agent.AddressBookPolicyRoutingAgent.csproj (in 18.45 sec)."
            var matchSeconds = Regex.Match(line, @"^\s+Restored (.*) \(in (\d+\.\d+) sec\)\.$");

            if (matchSeconds.Success)
            {
                string projectPath = matchSeconds.Groups[1].Value;
                double restoreTimeSeconds = double.Parse(matchSeconds.Groups[2].Value);
                double restoreTimeMS = Math.Round((double)(restoreTimeSeconds * 1000), 2);
                double restoreTimeMinutes = Math.Round((double)(restoreTimeSeconds / 60), 2);
                output.Add($"{projectPath},{restoreTimeMS},{restoreTimeSeconds},{restoreTimeMinutes}");
                continue;
            }

            // Look for lines that restored within minutes. The line will look like this:
            // A regex to match the line "         Restored d:\dbs\el\utff\src\sources\dev\mexagents\src\addressbookpolicyroutingagent\Microsoft.Exchange.Transport.Agent.AddressBookPolicyRoutingAgent.csproj (in 1.45 min)."
            var matchMinutes = Regex.Match(line, @"^\s+Restored (.*) \(in (\d+\.\d+) min\)\.$");

            if (matchMinutes.Success)
            {
                string projectPath = matchMinutes.Groups[1].Value;
                double restoreTimeMinutes = double.Parse(matchMinutes.Groups[2].Value);
                double restoreTimeSeconds = Math.Round((double)(restoreTimeMinutes * 60), 2);
                double restoreTimeMS = Math.Round((double)(restoreTimeSeconds * 1000), 2);
                output.Add($"{projectPath},{restoreTimeMS},{restoreTimeSeconds},{restoreTimeMinutes}");
                continue;
            }
        }
        return output;
    }
}
