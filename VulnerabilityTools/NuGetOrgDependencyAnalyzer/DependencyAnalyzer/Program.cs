using DependencyAnalyzer;
using System.CommandLine;

internal class Program
{
    private static async Task<int> Main(string[] args)
    {
        var rootCommand = CreateCommand();
        return await rootCommand.InvokeAsync(args);
    }

    private static RootCommand CreateCommand()
    {
        var defaultSettings = DefaultSettings.Get();

        var rootCommand = new RootCommand("Find packages on NuGet.org with vulnerable dependencies");

        var dataDirectoryArgument = new Argument<DirectoryInfo>()
        {
            Name = "DataDirectory",
            Description = "The directory where input, temporary, and results files will be written",
            Arity = ArgumentArity.ExactlyOne
        };
        if (defaultSettings?.DirectoryInfo is not null)
        {
            dataDirectoryArgument.SetDefaultValue(defaultSettings.DirectoryInfo);
        }
        rootCommand.AddArgument(dataDirectoryArgument);

        var insightsStorageAccountOption = new Option<string>("--insights-storage-account")
        {
            Description = "Azure Storage account name containing NuGet Insights CSV files",
        };
        insightsStorageAccountOption.AddAlias("-a");
        rootCommand.AddOption(insightsStorageAccountOption);

        rootCommand.SetHandler(RunAsync, dataDirectoryArgument, insightsStorageAccountOption);

        var setDefaultCommand = new Command("set-default")
        {
            Description = "Set the default data directory"
        };

        var clearOption = new Option<bool>("--clear")
        {
            Description = "Unsets any default data directory"
        };
        clearOption.AddAlias("-c");
        setDefaultCommand.AddOption(clearOption);

        var defaultDataDirectoryArgument = new Argument<DirectoryInfo>()
        {
            Name = dataDirectoryArgument.Name,
            Description = dataDirectoryArgument.Description,
            Arity = ArgumentArity.ZeroOrOne
        };
        setDefaultCommand.AddArgument(defaultDataDirectoryArgument);

        setDefaultCommand.SetHandler(SetDefaultAsync, clearOption, defaultDataDirectoryArgument);
        rootCommand.AddCommand(setDefaultCommand);

        return rootCommand;
    }

    private static Task<int> SetDefaultAsync(bool clear, DirectoryInfo? defaultDirectory)
    {
        if (!clear && defaultDirectory is null)
        {
            Console.Error.WriteLine("set-defaults requires either DefaultDirectory to be set, or --clear");
            return Task.FromResult((int)ExitCodes.ArgsError);
        }
        if (clear && defaultDirectory is not null)
        {
            Console.Error.WriteLine("set-defaults requires either DefaultDirectory to be set, or --clear");
            return Task.FromResult((int)ExitCodes.ArgsError);
        }

        if (clear)
        {
            DefaultSettings.Set(null);
        }
        else if (defaultDirectory is not null)
        {
            var newSettings = new DefaultSettings
            {
                DirectoryInfo = defaultDirectory
            };
            DefaultSettings.Set(newSettings);
        }

        return Task.FromResult((int)ExitCodes.Ok);
    }

    private static async Task<int> RunAsync(DirectoryInfo dataDirectory, string? insightsStorageAccount)
    {
        if (!dataDirectory.Exists)
        {
            dataDirectory.Create();
        }

        State? state = State.Read(dataDirectory);
        if (state is null || state.NuGetInsightsUrl is null)
        {
            if (string.IsNullOrEmpty(insightsStorageAccount))
            {
                Console.Error.WriteLine("NuGet Insights URL must be provided once with --insights-storage-account");
                return (int)ExitCodes.MissingDataError;
            }
            else
            {
                state = new State
                {
                    NuGetInsightsUrl = insightsStorageAccount,
                };
            }
        }

        if (!string.IsNullOrEmpty(insightsStorageAccount))
        {
            state = state with
            {
                NuGetInsightsUrl = insightsStorageAccount
            };
            state.Save(dataDirectory);
        }

        State newState = await DownloadFilesAsync(state, dataDirectory);
        await CalculateIntermediatesAsync(newState, dataDirectory);

        return 0;

        static async Task<State> DownloadFilesAsync(State state, DirectoryInfo dataDirectory)
        {
            var downloader = new Downloader(state, dataDirectory);
            await downloader.GetAllData();
            return downloader.State;
        }

        static async Task CalculateIntermediatesAsync(State state, DirectoryInfo dataDirectory)
        {
            var intermediates = new Intermediates(state, dataDirectory);
            await intermediates.CalculateAsync();
        }
    }
}
