using System.Collections.Immutable;
using System.Text.Json;

namespace DependencyAnalyzer
{
    internal record State
    {
        public required string NuGetInsightsUrl { get; init; }
        public FileGroups? Files { get; init; }

        public static State? Read(DirectoryInfo directory)
        {
            var fileName = Path.Combine(directory.FullName, "state.json");
            if (!File.Exists(fileName))
            {
                return null;
            }

            using (var fileStream = File.OpenRead(fileName))
            {
                var result = JsonSerializer.Deserialize<State>(fileStream);
                return result;
            }
        }

        public void Save(DirectoryInfo directory)
        {
            var fileName = Path.Combine(directory.FullName, "state.json");
            using (var fileStream = File.OpenWrite(fileName))
            {
                JsonSerializer.Serialize(fileStream, this);
            }
        }
    }

    internal record FileGroups
    {
        public required ImmutableList<BlobFile> PackageManifests { get; init; }
        public required ImmutableList<BlobFile> PackageDeprecations { get; init; }
        public required ImmutableList<BlobFile> PackageDownloads { get; init; }
        public required ImmutableList<BlobFile> PackageVersions { get; init; }
    }

    internal record BlobFile
    {
        public required string Name { get; init; }
        public required string MD5 { get; init; }
        public required DateTimeOffset LastModified { get; init; }
        public required long Length { get; init; }
        public required string ETag { get; init; }
    }
}
