using System.Text.Json;
using System.Text.Json.Serialization;

namespace DependencyAnalyzer
{
    internal class DefaultSettings
    {
        public required DirectoryInfo DirectoryInfo { get; init; }

        public static DefaultSettings? Get()
        {
            var path = GetFileName();
            if (!File.Exists(path))
            {
                return null;
            }
            var options = GetJsonSerializerOptions();
            try
            {
                using (var fileStream = File.OpenRead(path))
                {
                    var defaults = JsonSerializer.Deserialize<DefaultSettings>(fileStream, options);
                    return defaults;
                }
            }
            catch
            {
                return null;
            }
        }

        public static void Set(DefaultSettings? settings)
        {
            var path = GetFileName();
            if (settings == null)
            {
                if (File.Exists(path))
                {
                    File.Delete(path);
                }
            }
            else
            {
                var settingsDirectory = Path.GetDirectoryName(path);
                if (settingsDirectory is null)
                {
                    throw new Exception("Settings directory is null");
                }
                if (!Directory.Exists(settingsDirectory))
                {
                    Directory.CreateDirectory(settingsDirectory);
                }

                var options = GetJsonSerializerOptions();

                using (var fileStream = File.OpenWrite(path))
                {
                    JsonSerializer.Serialize(fileStream, settings, options);
                }
            }
        }

        private static string GetFileName()
        {
            string localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            var path = Path.Combine(localAppData, "NuGet", "VulnerabilityTools", "NuGetOrgDependencyAnalyzer", "defaults.json");
            return path;
        }

        private static JsonSerializerOptions GetJsonSerializerOptions()
        {
            var options = new JsonSerializerOptions()
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            };
            options.Converters.Add(new DirectoryInfoConverter());
            return options;
        }

        private class DirectoryInfoConverter : JsonConverter<DirectoryInfo>
        {
            public override DirectoryInfo? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                var directoryPath = reader.GetString();
                if (directoryPath == null)
                {
                    throw new JsonException("Directory path cannot be null");
                }
                return new DirectoryInfo(directoryPath);
            }

            public override void Write(Utf8JsonWriter writer, DirectoryInfo value, JsonSerializerOptions options)
            {
                writer.WriteStringValue(value.FullName);
            }
        }
    }
}
