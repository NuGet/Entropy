//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GithubIssueTagger.Reports.IceBox {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class IceBoxResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal IceBoxResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GithubIssueTagger.Reports.IceBox.IceBoxResource", typeof(IceBoxResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to mutation($issue:ID!, $label:ID!) {
        ///  addLabelsToLabelable(input:{labelableId: $issue, labelIds: [ $label ]}) {
        ///    __typename
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string AddLabelToIssue {
            get {
                return ResourceManager.GetString("AddLabelToIssue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to query($owner: String!,
        ///      $repo: String!,
        ///      $after: String,
        ///      $label: String!,
        ///      $timelineCount: Int!,
        ///      $reactionCount: Int!) { 
        ///  repository(owner: $owner, name:$repo){
        ///    issues(first:100, after: $after, labels: [$label]){
        ///      totalCount,
        ///      pageInfo {
        ///        hasNextPage,
        ///        endCursor
        ///      },
        ///      nodes {
        ///        id,
        ///        number,
        ///        title,
        ///        timelineItems(itemTypes: [LABELED_EVENT], last: $timelineCount) {
        ///          totalCount,
        ///          p [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetIssues {
            get {
                return ResourceManager.GetString("GetIssues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to query($issue: ID!) {
        ///    node (id: $issue) {
        ///        ... on Issue {
        ///            timelineItems(last: 100, itemTypes: [ LABELED_EVENT ]) {
        ///                totalCount,
        ///                pageInfo {
        ///                    hasNextPage,
        ///                    endCursor
        ///                }
        ///                nodes {
        ///                    ... on LabeledEvent {
        ///                        createdAt,
        ///                        label {
        ///                            name
        ///                        }
        ///                    }
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetLabeledEvents {
            get {
                return ResourceManager.GetString("GetLabeledEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to query($owner: String!, $repo: String!, $label: String!) {
        ///  repository(owner: $owner, name: $repo) {
        ///    label(name: $label) {
        ///      id
        ///    }
        ///  }
        ///}
        ///.
        /// </summary>
        internal static string GetLabelId {
            get {
                return ResourceManager.GetString("GetLabelId", resourceCulture);
            }
        }
    }
}
