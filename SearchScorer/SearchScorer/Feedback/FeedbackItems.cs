using System.Collections.Generic;

namespace SearchScorer.Feedback
{
    public static class FeedbackItems
    {
        public static IEnumerable<FeedbackItem> GetAll()
        {
            return new FeedbackItemBuilder()

                .Source(FeedbackSource.NuGetPartnersInternal)
                    .Disposition(FeedbackDisposition.OldIsBetter)
                        .Add("Approximate Nearest Neighbors", new[] { "hnswlib" }, Bucket.Tags)
                    .Disposition(FeedbackDisposition.NewIsGreat)
                        .Add("commandline", new[] { "CommandLineParser" }, Bucket.PartialId)
                        .Add("microsoft.*", new[] { "Microsoft.CSharp" }, Bucket.Prefix)
                        .Add("ServerHost", new[] { "ServerHost" }, Bucket.TopDownloads)

                .Source(FeedbackSource.InternalAdHoc)
                    .Disposition(FeedbackDisposition.OldIsBetter)
                        .Add("common mark", new[] { "CommonMark.NET" }, Bucket.MultiTerm)
                        .Add("mysql", new[] { "Mysql.Data" }, Bucket.PartialId)
                        .Add("Npgsql.EntityFrameworkCore.PostgreSQL", new[] { "Npgsql.EntityFrameworkCore.PostgreSQL", "Npgsql.EntityFrameworkCore.PostgreSQL.Design" }, Bucket.Prefix)
                        .Add("pdf", new[] { "iTextSharp" }, Bucket.Tags)
                        .Add("socket.io", new[] { "SocketIoClientDotNet", "Socket.IO.Client" }, Bucket.PartialId, Bucket.Prefix)
                        .Add("System.Net.Http.Formatting", new[] { "System.Net.Http.Formatting.Extension" }, Bucket.Prefix)
                        .Add("system.web.mvc", new[] { "System.Web.Mvc.Extensions" }, Bucket.Prefix)
                    .Disposition(FeedbackDisposition.NeitherIsBetter)
                        .Add("signalr", new[] { "Microsoft.AspNet.SignalR", "Microsoft.AspNetCore.SignalR" }, Bucket.PartialId)
                        .Add("system.web", new[] { "System.Web.Http.Common", "System.Web.Providers", "System.Web.Optimiziation.React", "System.Web.Providers.Core" }, Bucket.Prefix)
                        .Add("tags:\"aws-sdk-v3\"", new[] { "AWSSDK.Core" }, Bucket.Tags)
                    .Disposition(FeedbackDisposition.NewIsGreat)
                        .Add("cosmos", new[] { "Microsoft.Azure.Cosmos" }, Bucket.PartialId)
                        .Add("fluentassertion", new[] { "FluentAssertions" }, Bucket.Prefix)
                        .Add("imagesharp", new[] { "SixLabors.ImageSharp" }, Bucket.PartialId)
                        .Add("microsoft.aspnetcore", new[] { "Microsoft.AspNetCore.App" }, Bucket.Prefix)
                        .Add("MicrosoftEntityFrameWorkCore.Tools", new[] { "Microsoft.EntityFrameworkCore.Tools" }, Bucket.PartialId)
                        .Add("System.Drawing", new[] { "System.Drawing.Common", "System.Drawing.Primitives" }, Bucket.Prefix)
                        .Add("tags:\"serilog\"", new[] { "Serilog" }, Bucket.Tags)

                .Source(FeedbackSource.Mvps)
                    .Disposition(FeedbackDisposition.OldIsBetter)
                        .Add("aad", new[] { "Microsoft.IdentityModel.Clients.ActiveDirectory" }, Bucket.Acronym, Bucket.Tags)
                        .Add("ADAL", new[] { "Microsoft.IdentityModel.Clients.ActiveDirectory" }, Bucket.PartialId)
                        .Add("asp.net core initialization", new[] { "AspNetCore.AsyncInitialization" }, Bucket.MultiTerm)
                        .Add("aws", new[] { "AWSSDK.Core" }, Bucket.PartialId)
                        .Add("azure f#", new[] { "FSharp.Azure", "FSharp.Azure.StorageTypeProvider" }, Bucket.PartialId, Bucket.Tags)
                        .Add("Entity framework", new[] { "EntityFramework" }, Bucket.MultiTerm)
                        .Add("fxcop analyzers", new[] { "Microsoft.CodeAnalysis.FxCopAnalyzers" }, Bucket.MultiTerm)
                        .Add("json.net", new[] { "Newtonsoft.Json" }, Bucket.CommonName)
                        .Add("json.net", new[] { "Newtonsoft.Json" }, Bucket.CommonName)
                        .Add("micro orm", new[] { "Dapper" }, Bucket.Tags)
                        .Add("microsoft.azure.webjobs.extensions", new[] { "Microsoft.Azure.WebJobs.Extensions" }, Bucket.ExactMatch)
                        .Add("Microsoft.DotNet.Analyzers.Compatibility", new[] { "Microsoft.DotNet.Analyzers.Compatibility" }, Bucket.ExactMatch)
                        .Add("multi line", new[] { "MultiLineStringAnalyzer" }, Bucket.MultiTerm)
                        .Add("netcore", new[] { "Microsoft.NETCore.*" }, Bucket.TopDownloads)
                        .Add("nlp", new[] { "Stanford.NLP.CoreNLP" }, Bucket.PartialId)
                        .Add("ooui", new[] { "Ooui" }, Bucket.Prefix, Bucket.TopDownloads)
                        .Add("sqlite.net", new[] { "sqlite-net-pcl" }, Bucket.MultiTerm)
                        .Add("sqlite", new[] { "System.Data.Sqlite" }, Bucket.TopDownloads)
                        .Add("tags:linqpad-samples", new[] { "Octokit" }, Bucket.TopDownloads)
                        .Add("text.ui", new[] { "Microsoft.VisualStudio.Text.UI" }, Bucket.PartialId)
                        .Add("toast notifications", new[] { "Microsoft.Toolkit.Uwp.Notifications" }, Bucket.TopDownloads, Bucket.Tags)
                        .Add("unit test", new[] { "NUnit" }, Bucket.TopDownloads, Bucket.Tags)
                    .Disposition(FeedbackDisposition.NeitherIsBetter)
                        .Add("analyzers", new[] { "Microsoft.CodeAnalysis.FxCopAnalyzers" }, Bucket.PartialId)
                        .Add("apianalysis", new[] { "ApiAnalysis.SimpleJsonAnalyzer" }, Bucket.PartialId)
                        .Add("common helpers", new[] { "CommonHelpers" }, Bucket.MultiTerm)
                        .Add("fxcop", new[] { "Microsoft.CodeAnalysis.FxCopAnalyzers" }, Bucket.TopDownloads)
                        .Add("json", new[] { "Newtonsoft.Json" }, Bucket.TopDownloads)
                        .Add("microsoft.windows.compatibility", new[] { "microsoft.windows.compatibility" }, Bucket.ExactMatch)
                        .Add("Newt", new[] { "Newtonsoft.Json" }, Bucket.Prefix)
                        .Add("Oragon Spring", new[] { "Oragon.Spring.Core", "Oragon.Spring.Aop", "Oragon.Spring.Extensions.DependencyInjection" }, Bucket.MultiTerm)
                        .Add("Spring.net", new[] { "Spring.Core" }, Bucket.CommonName)
                    .Disposition(FeedbackDisposition.NewIsBetterButNeedsWork)
                        .Add("app authentication managed identity", new[] { "Microsoft.Azure.Services.AppAuthentication" }, Bucket.MultiTerm)
                        .Add("aspnetcore app", new[] { "Microsoft.AspNetCore.App" }, Bucket.MultiTerm)
                        .Add("bench", new[] { "BenchmarkDotNet" }, Bucket.Prefix)
                        .Add("benchmark", new[] { "BenchmarkDotNet" }, Bucket.Prefix)
                        .Add("entity framework", new[] { "EntityFramework" }, Bucket.MultiTerm)
                        .Add("entityframeworkcore", new[] { "Microsoft.EntityFrameworkCore" }, Bucket.PartialId)
                        .Add("Microsoft.Extensions.Depen", new[] { "Microsoft.Extensions.DependencyInjection" }, Bucket.Prefix)
                        .Add("uwp core", new[] { "Microsoft.NETCore.UniversalWindowsPlatform" }, Bucket.MultiTerm, Bucket.Acronym)
                        .Add("windows.extensions", new[] { "system.windows.extensions" }, Bucket.PartialId)
                    .Disposition(FeedbackDisposition.NewIsGreat)
                        .Add("Android support", new[] { "Xamarin.Android.Support.v4" }, Bucket.MultiTerm)
                        .Add("Android.Support.Design", new[] { "Xamarin.Android.Support.Design" }, Bucket.MultiTerm)
                        .Add("arcore", new[] { "Xamarin.Google.ARCore" }, Bucket.PartialId)
                        .Add("asp.net core async initialization", new[] { "AspNetCore.AsyncInitialization" }, Bucket.MultiTerm)
                        .Add("boletonet", new[] { "Boleto.Net" }, Bucket.PartialId)
                        .Add("Cake", new[] { "Cake" }, Bucket.PartialId)
                        .Add("ci.extension", new[] { "ci.extensions" }, Bucket.ExactMatch)
                        .Add("Commonhelpers", new[] { "CommonHelpers" }, Bucket.Prefix)
                        .Add("dependency injection", new[] { "Microsoft.Extensions.DependencyInjection.Abstractions", "Microsoft.Extensions.DependencyInjection" }, Bucket.MultiTerm)
                        .Add("EF Core", new[] { "Microsoft.EntityFrameworkCore" }, Bucket.Acronym, Bucket.MultiTerm)
                        .Add("Entityframeworkcore.firebirdsql", new[] { "EntityFrameworkCore.FirebirdSql" }, Bucket.ExactMatch)
                        .Add("Esri", new[] { "Esri.ArcGISRuntime" }, Bucket.PartialId)
                        .Add("forms", new[] { "Xamarin.Forms" }, Bucket.TopDownloads)
                        .Add("gardiner", new[] { "PowerShellWixExtension" }, Bucket.Author)
                        .Add("identity server", new[] { "IdentityServer4" }, Bucket.MultiTerm)
                        .Add("json", new[] { "Newtonsoft.Json" }, Bucket.PartialId, Bucket.TopDownloads)
                        .Add("json", new[] { "Newtonsoft.Json" }, Bucket.PartialId)
                        .Add("localization provider core", new[] { "LocalizationProvider.AspNetCore" }, Bucket.PartialId)
                        .Add("MADE", new[] { "MADE.App" }, Bucket.PartialId)
                        .Add("microsoft.azure", new[] { "Microsoft.WindowsAzure.ConfigurationManager" }, Bucket.TopDownloads)
                        .Add("Microsoft.Extensions", new[] { "Microsoft.Extensions.Logging.Abstractions" }, Bucket.TopDownloads)
                        .Add("ml", new[] { "Microsoft.ML" }, Bucket.TopDownloads)
                        .Add("mocking", new[] { "Moq", "Nsubstitute", "FakeItEasy" }, Bucket.TopDownloads)
                        .Add("newtonsoft", new[] { "Newtonsoft.Json" }, Bucket.TopDownloads)
                        .Add("nhibernate", new[] { "NHibernate" }, Bucket.TopDownloads)
                        .Add("noda time", new[] { "NodaTime" }, Bucket.TopDownloads)
                        .Add("oragon", new[] { "Oragon.Spring.Core" }, Bucket.PartialId)
                        .Add("Prism forms", new[] { "Prism.Forms" }, Bucket.TopDownloads)
                        .Add("reactive", new[] { "System.Reactive" }, Bucket.TopDownloads)
                        .Add("skia", new[] { "SkiaSharp" }, Bucket.Prefix)
                        .Add("snmp", new[] { "Lextm.SharpSnmpLib" }, Bucket.TopDownloads, Bucket.Freshness)
                        .Add("sqlite.net", new[] { "sqlite-net-pcl" }, Bucket.PartialId)
                        .Add("svg", new[] { "Xamarin.FFImageLoading.Svg" }, Bucket.PartialId)
                        .Add("tdd", new[] { "NUnit" }, Bucket.PartialId)
                        .Add("Tweet", new[] { "CoreTweet" }, Bucket.PartialId)
                        .Add("Ui for uwp", new[] { "Telerik.UI.for.UniversalWindowsPlatform" }, Bucket.Acronym, Bucket.MultiTerm)
                        .Add("Umbraco", new[] { "UmbracoCms" }, Bucket.Prefix)
                        .Add("Umbraco", new[] { "UmbracoCms" }, Bucket.Prefix)
                        .Add("uwp pdf", new[] { "Syncfusion.Pdf.UWP" }, Bucket.MultiTerm)
                        .Add("westfall", new[] { "Xamarin.ANRWatchDog" }, Bucket.Author)
                        .Add("xamarin forms", new[] { "Xamarin.Forms" }, Bucket.MultiTerm)
                        .Add("xamarin forms", new[] { "Xamarin.Forms" }, Bucket.MultiTerm)
                        .Add("Xamarin.forms", new[] { "Xamarin.Forms" }, Bucket.ExactMatch)
                        .Add("Xamarin", new[] { "Xamarin.Forms" }, Bucket.PartialId)
                        .Add("Xamarin", new[] { "Xamarin.Forms" }, Bucket.TopDownloads)
                        .Add("XPlat", new[] { "XPlat.Core" }, Bucket.PartialId)
                        .Add("xunit", new[] { "xunit" }, Bucket.TopDownloads)

                .Source(FeedbackSource.V3Internal)
                    .Disposition(FeedbackDisposition.OldIsBetter)
                        .Add("excel", new[] { "EPPlus" }, Bucket.Tags)
                        .Add("mail", new[] { "MailKit" }, Bucket.Prefix)
                        .Add("my sample lib", new[] { "My.Sample.Lib" }, Bucket.MultiTerm)
                        .Add("mysql data entity", new[] { "MySql.Data.Entity" }, Bucket.MultiTerm)
                        .Add("owners:anangaur", new[] { "My.Sample.Lib" }, Bucket.TopDownloads)
                        .Add("pdf", new[] { "iTextSharp" }, Bucket.Tags)
                    .Disposition(FeedbackDisposition.NeitherIsBetter)
                        .Add("Blazor", new[] { "Microsoft.AspNetCore.Blazor", "Microsoft.AspNetCore.Blazor.Browser", "Microsoft.AspNetCore.Blazor.Analyzers" }, Bucket.PartialId)
                        .Add("markdown", new[] { "Markdig" }, Bucket.Tags)
                        .Add("markdown", new[] { "MarkdownSharp" }, Bucket.Prefix)
                    .Disposition(FeedbackDisposition.NewIsBetterButNeedsWork)
                        .Add("cosmos", new[] { "Microsoft.Azure.Cosmos" }, Bucket.PartialId)
                        .Add("image", new[] { "ImageProcessor" }, Bucket.Prefix)
                        .Add("lucene", new[] { "Lucene.net" }, Bucket.Prefix)
                        .Add("MS, .net core", new[] { "Microsoft.AspNetCore.*" }, Bucket.MultiTerm)
                        .Add("nuget.build.task", new[] { "NuGet.Build.Tasks.Pack" }, Bucket.Prefix)
                        .Add("telerik uwp", new[] { "Telerik.UI.for.UniversalWindowsPlatform" }, Bucket.MultiTerm, Bucket.Tags)
                    .Disposition(FeedbackDisposition.NewIsGreat)
                        .Add("applicationinsights", new[] { "Microsoft.ApplicationInsights" }, Bucket.PartialId)
                        .Add("aspnetcore", new[] { "Microsoft.AspNetCore.Mvc" }, Bucket.PartialId)
                        .Add("Azure", new[] { "WindowsAzure.Storage" }, Bucket.PartialId)
                        .Add("blob storage", new[] { "WindowsAzure.Storage" }, Bucket.Tags)
                        .Add("csharp", new[] { "Microsoft.CSharp" }, Bucket.PartialId)
                        .Add("ef core", new[] { "Microsoft.EntityFrameworkCore" }, Bucket.MultiTerm, Bucket.Acronym)
                        .Add("elasticsearch", new[] { "Elasticsearch.Net" }, Bucket.PartialId)
                        .Add("json", new[] { "Newtonsoft.Json" }, Bucket.PartialId)
                        .Add("logging", new[] { "Microsoft.Extensions.Logging" }, Bucket.PartialId)
                        .Add("nhibernate", new[] { "NHibernate" }, Bucket.TopDownloads)
                        .Add("odata", new[] { "Microsoft.Data.OData" }, Bucket.PartialId)
                        .Add("orleans", new[] { "Microsoft.Orleans.Core" }, Bucket.PartialId)
                        .Add("polly", new[] { "Polly" }, Bucket.TopDownloads)
                        .Add("reactive", new[] { "System.Reactive" }, Bucket.PartialId)
                        .Add("redis", new[] { "StackExchange.Redis" }, Bucket.PartialId)
                        .Add("search", new[] { "Microsoft.Azure.Search" }, Bucket.Tags)
                        .Add("serilog", new[] { "Serilog" }, Bucket.ExactMatch)
                        .Add("tags:azure", new[] { "WindowsAzure.Storage" }, Bucket.Tags)
                        .Add("telerik uwp", new[] { "Telerik.UI.for.UniversalWindowsPlatform" }, Bucket.MultiTerm)

                .Source(FeedbackSource.V2Internal)
                    .Disposition(FeedbackDisposition.OldIsBetter)
                        .Add("aws", new[] { "AWSSDK.Core" }, Bucket.Prefix)
                        .Add("azure active directory", new[] { "Microsoft.IdentityModel.Clients.ActiveDirectory" }, Bucket.MultiTerm)
                        .Add("Build.Extensions", new[] { "Microsoft.NET.Build.Extensions" }, Bucket.PartialId)
                        .Add("fxcop", new[] { "Microsoft.CodeAnalysis.FxCopAnalyzers" }, Bucket.Prefix)
                        .Add("mahapps", new[] { "MahApps.Metro" }, Bucket.Prefix)
                        .Add("newtonsoft json", new[] { "Newtonsoft.Json" }, Bucket.MultiTerm)
                        .Add("ORM", new[] { "Dapper" }, Bucket.Tags)
                        .Add("razor", new[] { "Microsoft.AspNet.Razor" }, Bucket.PartialId)
                        .Add("wilderness labs", new[] { "Netduino.Foundation" }, Bucket.Author)
                    .Disposition(FeedbackDisposition.NeitherIsBetter)
                        .Add("ilmerge", new[] { "ILMerge", "Costura.Fody" }, Bucket.TopDownloads)
                    .Disposition(FeedbackDisposition.NewIsBetterButNeedsWork)
                        .Add("aspnet", new[] { "Microsoft.AspNet.Mvc" }, Bucket.PartialId)
                        .Add("entity", new[] { "entityframework" }, Bucket.PartialId)
                        .Add("logging", new[] { "Microsoft.Extensions.Logging" }, Bucket.PartialId, Bucket.Tags)
                        .Add("microsoft.bot.con", new[] { "Microsoft.Bot.Connector" }, Bucket.Prefix)
                        .Add("microsoft.netcore.platform", new[] { "microsoft.netcore.platforms" }, Bucket.Prefix)
                        .Add("Microsoft.NETCore.Platform", new[] { "Microsoft.NETCore.Platforms" }, Bucket.Prefix)
                        .Add("netcore", new[] { "microsoft.netcore.platforms" }, Bucket.PartialId)
                        .Add("newtonsoft wamp", new[] { "WampSharp.NewtonsoftJson" }, Bucket.MultiTerm)
                        .Add("nuget", new[] { "NuGet.Packaging" }, Bucket.Prefix)
                        .Add("xamarin", new[] { "Xamarin.Forms" }, Bucket.Prefix)
                    .Disposition(FeedbackDisposition.NewIsGreat)
                        .Add("documentdb", new[] { "Microsoft.Azure.Documentdb" }, Bucket.TopDownloads)
                        .Add("esri", new[] { "Esri.ArcGISRuntime" }, Bucket.TopDownloads, Bucket.Prefix)
                        .Add("imagesharp", new[] { "SixLabors.ImageSharp" }, Bucket.TopDownloads)
                        .Add("microsoft advertising", new[] { "Microsoft.Advertising.xaml" }, Bucket.MultiTerm)
                        .Add("microsoft graph", new[] { "Microsoft.Graph" }, Bucket.MultiTerm)
                        .Add("msbuild extras", new[] { "Msbuild.sdk.extras" }, Bucket.MultiTerm)
                        .Add("prism", new[] { "Prism.Core" }, Bucket.TopDownloads)
                        .Add("sqlite", new[] { "sqlite" }, Bucket.TopDownloads)
                        .Add("toolkit", new[] { "Microsoft.Toolkit" }, Bucket.TopDownloads)
                        .Add("xamarin forms", new[] { "Xamarin.Forms" }, Bucket.MultiTerm)
                        .Add("xamarin.android.support", new[] { "Xamarin.Android.Support.*" }, Bucket.Prefix)
                        .Add("xunit", new[] { "xunit" }, Bucket.TopDownloads)

                .Source(FeedbackSource.GitHubOrTwitter)
                    .Disposition(FeedbackDisposition.Unknown)
                        .Add("appsf", new[] { "AppsFlyer*" }, Bucket.Prefix)
                        .Add("Azure PCL", new[] { "Microsoft.Azure.Devices.Client.PCL" }, Bucket.MultiTerm)
                        .Add("azure", new[] { "WindowsAzure.Storage" }, Bucket.TopDownloads)
                        .Add("bouncycastle", new[] { "Portable.BouncyCastle" }, Bucket.TopDownloads)
                        .Add("csharp", new[] { "Microsoft.CodeAnalysis.CSharp" }, Bucket.TopDownloads)
                        .Add("DocumentDb", new[] { "Microsoft.Azure.DocumentDB" }, Bucket.TopDownloads)
                        .Add("documentdb", new[] { "Microsoft.Azure.DocumentDB" }, Bucket.TopDownloads)
                        .Add("entity core", new[] { "Microsoft.EntityFrameworkCore" }, Bucket.TopDownloads)
                        .Add("entity framework", new[] { "Microsoft.EntityFrameworkCore" }, Bucket.Tags)
                        .Add("EntityFrameworkCore", new[] { "Microsoft.EntityFrameworkCore" }, Bucket.TopDownloads)
                        .Add("eventgri", new[] { "Microsoft.Azure.EventGrid" }, Bucket.Prefix)
                        .Add("FluentAssertion", new[] { "FluentAssertions" }, Bucket.Prefix)
                        .Add("FxCop", new[] { "Microsoft.CodeAnalysis.FxCopAnalyzers" }, Bucket.TopDownloads)
                        .Add("google cloud storage", new[] { "Google.Cloud.Storage.V1" }, Bucket.MultiTerm, Bucket.Tags)
                        .Add("IdentityModel", new[] { "IdentityModel" }, Bucket.TopDownloads)
                        .Add("IdentityServer4", new[] { "IdentityServer4" }, Bucket.ExactMatch)
                        .Add("linq2db", new[] { "linq2db" }, Bucket.ExactMatch)
                        .Add("microsoft aspnetcore mvc", new[] { "Microsoft.AspNetCore.Mvc" }, Bucket.MultiTerm)
                        .Add("Microsoft Bot Connector", new[] { "Microsoft.Bot.Connector" }, Bucket.MultiTerm)
                        .Add("microsoft dependencyinjection", new[] { "Microsoft.Extensions.DependencyInjection" }, Bucket.MultiTerm)
                        .Add("microsoft dependencyinjection", new[] { "Microsoft.Extensions.DependencyInjection" }, Bucket.TopDownloads)
                        .Add("Microsoft graph", new[] { "Microsoft.Graph" }, Bucket.MultiTerm)
                        .Add("microsoft logging console", new[] { "Microsoft.Extensions.Logging.Console" }, Bucket.MultiTerm)
                        .Add("microsoft.aspnetcore.static", new[] { "Microsoft.AspNetCore.StaticFiles" }, Bucket.Prefix)
                        .Add("Microsoft.Bot.Con", new[] { "Microsoft.Bot.Connector" }, Bucket.Prefix)
                        .Add("Microsoft.Extensions.Log", new[] { "Microsoft.Extensions.Logging" }, Bucket.Prefix)
                        .Add("Microsoft.Extensions", new[] { "Microsoft.Extensions.*" }, Bucket.Prefix, Bucket.TopDownloads)
                        .Add("Microsoft.Owin.Host.Sys", new[] { "Microsoft.Owin.Host.SystemWeb" }, Bucket.Prefix)
                        .Add("mpart", new[] { "mParticle.*" }, Bucket.Prefix)
                        .Add("ms di", new[] { "Microsoft.Extensions.DependencyInjection" }, Bucket.Acronym, Bucket.Tags)
                        .Add("ms ioc", new[] { "Microsoft.Extensions.DependencyInjection" }, Bucket.Acronym, Bucket.Tags)
                        .Add("mvc", new[] { "Microsoft.AspNetCore.Mvc" }, Bucket.TopDownloads)
                        .Add("mysql", new[] { "MySqlConnector" }, Bucket.TopDownloads)
                        .Add("MySqlConnector", new[] { "MySqlConnector" }, Bucket.ExactMatch)
                        .Add("NFC", new[] { "NdefLibrary" }, Bucket.Tags)
                        .Add("nhib", new[] { "NHibernate" }, Bucket.Prefix)
                        .Add("nsub", new[] { "NSubstituteAutoMocker" }, Bucket.Prefix)
                        .Add("nsubst", new[] { "NSubstituteAutoMocker" }, Bucket.Prefix)
                        .Add("pinvoke", new[] { "PInvoke.*" }, Bucket.TopDownloads)
                        .Add("rx", new[] { "System.Reactive" }, Bucket.CommonName, Bucket.Tags)
                        .Add("uwp", new[] { "Microsoft.Toolkit.Uwp" }, Bucket.TopDownloads)
                        .Add("Xamarin Forms", new[] { "Xamarin.Forms" }, Bucket.MultiTerm)
                        .Add("Xamarin.Android.Support", new[] { "Xamarin.Android.Support.v4" }, Bucket.Prefix)

                .Items;
        }

        private class FeedbackItemBuilder
        {
            private FeedbackSource _source;
            private FeedbackDisposition _disposition;
            private readonly List<FeedbackItem> _items = new List<FeedbackItem>();

            public FeedbackItemBuilder Source(FeedbackSource source)
            {
                _source = source;
                return this;
            }

            public FeedbackItemBuilder Disposition(FeedbackDisposition disposition)
            {
                _disposition = disposition;
                return this;
            }

            public FeedbackItemBuilder Add(string searchQuery, IEnumerable<string> mostRelevantPackageIds, params Bucket[] buckets)
            {
                var item = new FeedbackItem(
                    _source,
                    _disposition,
                    searchQuery,
                    mostRelevantPackageIds,
                    buckets);
                _items.Add(item);
                return this;
            }

            public IEnumerable<FeedbackItem> Items => _items;
        }
    }
}
